{"ast":null,"code":"var _jsxFileName = \"/Users/yuning/Documents/GitHub/BillShare/billshare_react/src/App.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.initializeMedia = async () => {\n      this.setState({\n        imageDataURL: null\n      });\n\n      if (!(\"mediaDevices\" in navigator)) {\n        navigator.mediaDevices = {};\n      }\n\n      if (!(\"getUserMedia\" in navigator.mediaDevices)) {\n        navigator.mediaDevices.getUserMedia = function (constraints) {\n          var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n          if (!getUserMedia) {\n            return Promise.reject(new Error(\"getUserMedia Not Implemented\"));\n          }\n\n          return new Promise((resolve, reject) => {\n            getUserMedia.call(navigator, constraints, resolve, reject);\n          });\n        };\n      } //Get the details of video inputs of the device\n\n\n      const videoInputs = await this.getListOfVideoInputs(); //The device has a camera\n\n      if (videoInputs.length) {\n        navigator.mediaDevices.getUserMedia({\n          video: {\n            deviceId: {\n              exact: videoInputs[this.cameraNumber].deviceId\n            }\n          }\n        }).then(stream => {\n          this.player.srcObject = stream;\n        }).catch(error => {\n          console.error(error);\n        });\n      } else {\n        alert(\"The device does not have a camera\");\n      }\n    };\n\n    this.capturePicture = () => {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = this.player.videoWidth;\n      canvas.height = this.player.videoHeight;\n      var contex = canvas.getContext(\"2d\");\n      contex.drawImage(this.player, 0, 0, canvas.width, canvas.height);\n      this.player.srcObject.getVideoTracks().forEach(track => {\n        track.stop();\n      });\n      console.log(canvas.toDataURL());\n      this.setState({\n        imageDataURL: canvas.toDataURL()\n      });\n    };\n\n    this.switchCamera = async () => {\n      const listOfVideoInputs = await this.getListOfVideoInputs(); // The device has more than one camera\n\n      if (listOfVideoInputs.length > 1) {\n        if (this.player.srcObject) {\n          this.player.srcObject.getVideoTracks().forEach(track => {\n            track.stop();\n          });\n        } // switch to second camera\n\n\n        if (this.cameraNumber === 0) {\n          this.cameraNumber = 1;\n        } // switch to first camera\n        else if (this.cameraNumber === 1) {\n          this.cameraNumber = 0;\n        } // Restart based on camera input\n\n\n        this.initializeMedia();\n      } else if (listOfVideoInputs.length === 1) {\n        alert(\"The device has only one camera\");\n      } else {\n        alert(\"The device does not have a camera\");\n      }\n    };\n\n    this.getListOfVideoInputs = async () => {\n      // Get the details of audio and video output of the device\n      const enumerateDevices = await navigator.mediaDevices.enumerateDevices(); //Filter video outputs (for devices with multiple cameras)\n\n      return enumerateDevices.filter(device => device.kind === \"videoinput\");\n    };\n\n    this.cameraNumber = 0;\n    this.state = {\n      imageDataURL: null\n    };\n  }\n\n  render() {\n    const playerORImage = Boolean(this.state.imageDataURL) ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: this.state.imageDataURL,\n      alt: \"cameraPic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: refrence => {\n        this.player = refrence;\n      },\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [playerORImage, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.initializeMedia,\n        children: \"Take Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.capturePicture,\n        children: \"Capture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.switchCamera,\n        children: \"Switch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/yuning/Documents/GitHub/BillShare/billshare_react/src/App.js"],"names":["React","App","Component","constructor","initializeMedia","setState","imageDataURL","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","reject","Error","resolve","call","videoInputs","getListOfVideoInputs","length","video","deviceId","exact","cameraNumber","then","stream","player","srcObject","catch","error","console","alert","capturePicture","canvas","document","createElement","width","videoWidth","height","videoHeight","contex","getContext","drawImage","getVideoTracks","forEach","track","stop","log","toDataURL","switchCamera","listOfVideoInputs","enumerateDevices","filter","device","kind","state","render","playerORImage","Boolean","refrence"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.cameraNumber = 0;\n\n    this.state = {\n      imageDataURL: null,\n    };\n  }\n\n  initializeMedia = async () => {\n    this.setState({ imageDataURL: null });\n\n    if (!(\"mediaDevices\" in navigator)) {\n      navigator.mediaDevices = {};\n    }\n\n    if (!(\"getUserMedia\" in navigator.mediaDevices)) {\n      navigator.mediaDevices.getUserMedia = function (constraints) {\n        var getUserMedia =\n          navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n        if (!getUserMedia) {\n          return Promise.reject(new Error(\"getUserMedia Not Implemented\"));\n        }\n\n        return new Promise((resolve, reject) => {\n          getUserMedia.call(navigator, constraints, resolve, reject);\n        });\n      };\n    }\n\n    //Get the details of video inputs of the device\n    const videoInputs = await this.getListOfVideoInputs();\n\n    //The device has a camera\n    if (videoInputs.length) {\n      navigator.mediaDevices\n        .getUserMedia({\n          video: {\n            deviceId: {\n              exact: videoInputs[this.cameraNumber].deviceId,\n            },\n          },\n        })\n        .then((stream) => {\n          this.player.srcObject = stream;\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    } else {\n      alert(\"The device does not have a camera\");\n    }\n  };\n\n  capturePicture = () => {\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = this.player.videoWidth;\n    canvas.height = this.player.videoHeight;\n    var contex = canvas.getContext(\"2d\");\n    contex.drawImage(this.player, 0, 0, canvas.width, canvas.height);\n    this.player.srcObject.getVideoTracks().forEach((track) => {\n      track.stop();\n    });\n\n    console.log(canvas.toDataURL());\n    this.setState({ imageDataURL: canvas.toDataURL() });\n  };\n\n  switchCamera = async () => {\n    const listOfVideoInputs = await this.getListOfVideoInputs();\n\n    // The device has more than one camera\n    if (listOfVideoInputs.length > 1) {\n      if (this.player.srcObject) {\n        this.player.srcObject.getVideoTracks().forEach((track) => {\n          track.stop();\n        });\n      }\n\n      // switch to second camera\n      if (this.cameraNumber === 0) {\n        this.cameraNumber = 1;\n      }\n      // switch to first camera\n      else if (this.cameraNumber === 1) {\n        this.cameraNumber = 0;\n      }\n\n      // Restart based on camera input\n      this.initializeMedia();\n    } else if (listOfVideoInputs.length === 1) {\n      alert(\"The device has only one camera\");\n    } else {\n      alert(\"The device does not have a camera\");\n    }\n  };\n\n  getListOfVideoInputs = async () => {\n    // Get the details of audio and video output of the device\n    const enumerateDevices = await navigator.mediaDevices.enumerateDevices();\n\n    //Filter video outputs (for devices with multiple cameras)\n    return enumerateDevices.filter((device) => device.kind === \"videoinput\");\n  };\n\n  render() {\n    const playerORImage = Boolean(this.state.imageDataURL) ? (\n      <img src={this.state.imageDataURL} alt=\"cameraPic\" />\n    ) : (\n      <video\n        ref={(refrence) => {\n          this.player = refrence;\n        }}\n        autoPlay\n      ></video>\n    );\n\n    return (\n      <div className=\"App\">\n        {playerORImage}\n        <button onClick={this.initializeMedia}>Take Photo</button>\n        <button onClick={this.capturePicture}>Capture</button>\n        <button onClick={this.switchCamera}>Switch</button>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}