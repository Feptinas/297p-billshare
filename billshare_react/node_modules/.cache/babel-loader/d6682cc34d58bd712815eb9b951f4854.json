{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from './constant';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  /**JWT AUTH */\n  executeJWTAuthService(email, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      email,\n      password\n    });\n  }\n\n  registerSuccessfulLoginForJWT(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosIntercetors(this.createJWTHeader(token));\n  }\n\n  createJWTHeader(token) {\n    return 'Bearer ' + token;\n  }\n  /** */\n\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLogin() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getUser() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosIntercetors(AuthHeader) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLogin()) config.headers.authorization = AuthHeader;\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/yuning/Documents/GitHub/BillShare/billshare_react/src/api/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJWTAuthService","email","password","post","registerSuccessfulLoginForJWT","username","token","sessionStorage","setItem","setupAxiosIntercetors","createJWTHeader","logout","removeItem","isUserLogin","user","getItem","getUser","AuthHeader","interceptors","request","use","config","headers","authorization"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AACP,MAAMC,qBAAN,CAA4B;AAGxB;AACAC,EAAAA,qBAAqB,CAACC,KAAD,EAAOC,QAAP,EAAgB;AACjC,WAAON,KAAK,CAACO,IAAN,CAAY,GAAEN,OAAQ,eAAtB,EAAqC;AAACI,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAArC,CAAP;AACH;;AACDE,EAAAA,6BAA6B,CAACC,QAAD,EAAUC,KAAV,EAAgB;AAEzCC,IAAAA,cAAc,CAACC,OAAf,CAAuBV,gCAAvB,EAAwDO,QAAxD;AACA,SAAKI,qBAAL,CAA2B,KAAKC,eAAL,CAAqBJ,KAArB,CAA3B;AACH;;AACDI,EAAAA,eAAe,CAACJ,KAAD,EAAO;AAClB,WAAO,YAAYA,KAAnB;AACH;AAED;;;AACAK,EAAAA,MAAM,GAAE;AACJJ,IAAAA,cAAc,CAACK,UAAf,CAA0Bd,gCAA1B;AACH;;AACDe,EAAAA,WAAW,GAAE;AACT,QAAIC,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBjB,gCAAvB,CAAX;AACA,QAAGgB,IAAI,KAAK,IAAZ,EACI,OAAO,KAAP;AACJ,WAAO,IAAP;AACH;;AACDE,EAAAA,OAAO,GAAE;AACL,QAAIF,IAAI,GAAGP,cAAc,CAACQ,OAAf,CAAuBjB,gCAAvB,CAAX;AACA,QAAGgB,IAAI,KAAK,IAAZ,EACI,OAAO,EAAP;AACJ,WAAOA,IAAP;AACH;;AACDL,EAAAA,qBAAqB,CAACQ,UAAD,EAAY;AAE7BrB,IAAAA,KAAK,CAACsB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAG,KAAKR,WAAL,EAAH,EACIQ,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BN,UAA/B;AACJ,aAAOI,MAAP;AACH,KALL;AAOH;;AAzCuB;;AA6C5B,eAAe,IAAItB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\nimport {API_URL} from './constant'\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\nclass AuthenticationService {\n\n\n    /**JWT AUTH */\n    executeJWTAuthService(email,password){\n        return axios.post(`${API_URL}/authenticate`,{email,password})\n    }\n    registerSuccessfulLoginForJWT(username,token){\n        \n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username)\n        this.setupAxiosIntercetors(this.createJWTHeader(token))\n    }\n    createJWTHeader(token){\n        return 'Bearer ' + token\n    }\n\n    /** */\n    logout(){\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n    }\n    isUserLogin(){\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if(user === null) \n            return false\n        return true\n    }\n    getUser(){\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if(user === null)\n            return ''\n        return user\n    }\n    setupAxiosIntercetors(AuthHeader){\n\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLogin())\n                    config.headers.authorization = AuthHeader\n                return config\n            }\n        )\n    }\n\n}\n\nexport default new AuthenticationService();"]},"metadata":{},"sourceType":"module"}